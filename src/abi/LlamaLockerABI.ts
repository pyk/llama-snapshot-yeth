export const LlamaLockerAbi = [
    {
        inputs: [
            { internalType: "address", name: "owner_", type: "address" },
            { internalType: "address", name: "nft_", type: "address" },
            { internalType: "bytes32", name: "root_", type: "bytes32" },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    { inputs: [{ internalType: "address", name: "target", type: "address" }], name: "AddressEmptyCode", type: "error" },
    {
        inputs: [{ internalType: "address", name: "account", type: "address" }],
        name: "AddressInsufficientBalance",
        type: "error",
    },
    { inputs: [], name: "FailedInnerCall", type: "error" },
    { inputs: [], name: "InvalidAction", type: "error" },
    { inputs: [], name: "InvalidLockOwner", type: "error" },
    { inputs: [], name: "InvalidRecipient", type: "error" },
    { inputs: [], name: "InvalidRewardAmount", type: "error" },
    { inputs: [], name: "InvalidRewardToken", type: "error" },
    { inputs: [], name: "InvalidTokenCount", type: "error" },
    { inputs: [], name: "InvalidTotalShares", type: "error" },
    { inputs: [], name: "InvalidUnlockWindow", type: "error" },
    { inputs: [], name: "MathOverflowedMulDiv", type: "error" },
    {
        inputs: [{ internalType: "address", name: "owner", type: "address" }],
        name: "OwnableInvalidOwner",
        type: "error",
    },
    {
        inputs: [{ internalType: "address", name: "account", type: "address" }],
        name: "OwnableUnauthorizedAccount",
        type: "error",
    },
    { inputs: [], name: "ReentrancyGuardReentrantCall", type: "error" },
    {
        inputs: [{ internalType: "uint256", name: "value", type: "uint256" }],
        name: "SafeCastOverflowedUintToInt",
        type: "error",
    },
    {
        inputs: [{ internalType: "address", name: "token", type: "address" }],
        name: "SafeERC20FailedOperation",
        type: "error",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: false, internalType: "address", name: "owner", type: "address" },
            { indexed: false, internalType: "uint256[]", name: "tokenIds", type: "uint256[]" },
        ],
        name: "NewLocks",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [{ indexed: false, internalType: "address[]", name: "token", type: "address[]" }],
        name: "NewRewardTokens",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [{ indexed: false, internalType: "bytes32", name: "root", type: "bytes32" }],
        name: "NewRoot",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: false, internalType: "address", name: "owner", type: "address" },
            { indexed: false, internalType: "uint256[]", name: "tokenIds", type: "uint256[]" },
        ],
        name: "NewUnlocks",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, internalType: "address", name: "previousOwner", type: "address" },
            { indexed: true, internalType: "address", name: "newOwner", type: "address" },
        ],
        name: "OwnershipTransferStarted",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: true, internalType: "address", name: "previousOwner", type: "address" },
            { indexed: true, internalType: "address", name: "newOwner", type: "address" },
        ],
        name: "OwnershipTransferred",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            { indexed: false, internalType: "contract IERC20", name: "token", type: "address" },
            { indexed: false, internalType: "uint256", name: "amount", type: "uint256" },
        ],
        name: "RewardDistributed",
        type: "event",
    },
    { anonymous: false, inputs: [], name: "WhitelistDisabled", type: "event" },
    {
        inputs: [],
        name: "EPOCH_DURATION",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "LOCK_DURATION_IN_EPOCH",
        outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        stateMutability: "view",
        type: "function",
    },
    { inputs: [], name: "acceptOwnership", outputs: [], stateMutability: "nonpayable", type: "function" },
    {
        inputs: [{ internalType: "address[]", name: "tokens_", type: "address[]" }],
        name: "addRewardTokens",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [{ internalType: "address", name: "recipient_", type: "address" }],
        name: "claim",
        outputs: [
            {
                components: [
                    { internalType: "address", name: "token", type: "address" },
                    { internalType: "uint256", name: "amount", type: "uint256" },
                ],
                internalType: "struct LlamaLocker.Claimable[]",
                name: "results",
                type: "tuple[]",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "account_", type: "address" },
            { internalType: "address", name: "token_", type: "address" },
        ],
        name: "claimable",
        outputs: [{ internalType: "uint256", name: "amount", type: "uint256" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [{ internalType: "address", name: "account_", type: "address" }],
        name: "claimables",
        outputs: [
            {
                components: [
                    { internalType: "address", name: "token", type: "address" },
                    { internalType: "uint256", name: "amount", type: "uint256" },
                ],
                internalType: "struct LlamaLocker.Claimable[]",
                name: "results",
                type: "tuple[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    { inputs: [], name: "disableWhitelist", outputs: [], stateMutability: "nonpayable", type: "function" },
    {
        inputs: [
            { internalType: "address", name: "token_", type: "address" },
            { internalType: "uint256", name: "amount_", type: "uint256" },
        ],
        name: "distributeRewardToken",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [{ internalType: "address", name: "account_", type: "address" }],
        name: "getClaimedRewards",
        outputs: [
            {
                components: [
                    { internalType: "address", name: "token", type: "address" },
                    { internalType: "uint256", name: "amount", type: "uint256" },
                ],
                internalType: "struct LlamaLocker.Claimable[]",
                name: "results",
                type: "tuple[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getLocks",
        outputs: [
            {
                components: [
                    { internalType: "address", name: "owner", type: "address" },
                    { internalType: "uint256", name: "lockedAt", type: "uint256" },
                    { internalType: "uint256", name: "tokenId", type: "uint256" },
                ],
                internalType: "struct LlamaLocker.NFTLock[]",
                name: "results",
                type: "tuple[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [{ internalType: "address", name: "owner_", type: "address" }],
        name: "getLocksByOwner",
        outputs: [
            {
                components: [
                    { internalType: "address", name: "owner", type: "address" },
                    { internalType: "uint256", name: "lockedAt", type: "uint256" },
                    { internalType: "uint256", name: "tokenId", type: "uint256" },
                ],
                internalType: "struct LlamaLocker.NFTLock[]",
                name: "results",
                type: "tuple[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getRewardTokenCount",
        outputs: [{ internalType: "uint256", name: "count", type: "uint256" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "getRewardTokens",
        outputs: [{ internalType: "address[]", name: "results", type: "address[]" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [{ internalType: "uint256[]", name: "tokenIds_", type: "uint256[]" }],
        name: "lock",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            { internalType: "bytes32[]", name: "proof_", type: "bytes32[]" },
            { internalType: "uint256[]", name: "tokenIds_", type: "uint256[]" },
        ],
        name: "lock",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [{ internalType: "uint256", name: "tokenId", type: "uint256" }],
        name: "locks",
        outputs: [
            { internalType: "address", name: "owner", type: "address" },
            { internalType: "uint256", name: "lockedAt", type: "uint256" },
            { internalType: "uint256", name: "tokenId", type: "uint256" },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "nft",
        outputs: [{ internalType: "contract IERC721", name: "", type: "address" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            { internalType: "address", name: "", type: "address" },
            { internalType: "address", name: "", type: "address" },
            { internalType: "uint256", name: "", type: "uint256" },
            { internalType: "bytes", name: "", type: "bytes" },
        ],
        name: "onERC721Received",
        outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "owner",
        outputs: [{ internalType: "address", name: "", type: "address" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "pendingOwner",
        outputs: [{ internalType: "address", name: "", type: "address" }],
        stateMutability: "view",
        type: "function",
    },
    { inputs: [], name: "renounceOwnership", outputs: [], stateMutability: "nonpayable", type: "function" },
    {
        inputs: [{ internalType: "uint256", name: "", type: "uint256" }],
        name: "rewardTokens",
        outputs: [{ internalType: "address", name: "", type: "address" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "root",
        outputs: [{ internalType: "bytes32", name: "", type: "bytes32" }],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [{ internalType: "bytes32", name: "root_", type: "bytes32" }],
        name: "setRoot",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
        name: "transferOwnership",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [{ internalType: "uint256[]", name: "tokenIds_", type: "uint256[]" }],
        name: "unlock",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "whitelistDisabled",
        outputs: [{ internalType: "bool", name: "", type: "bool" }],
        stateMutability: "view",
        type: "function",
    },
] as const
